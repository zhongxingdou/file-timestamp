#!/usr/bin/env ruby
# encoding: utf-8

require 'rubygems'
require 'json'
require 'optparse'
require 'digest/md5' 

VERSION = "1.6.1"

def collectFileMtime dir, option
  exclude_ext = option[:exclude_ext]
  exclude_dir = option[:exclude_dir]
  include_ext = option[:include_ext]
  md5 = option[:md5]
  formatter = option[:time_format]

  # debugger
  map = {}
  full_dir = File.expand_path dir
  Dir.chdir full_dir
  is_empty = true
  Dir.foreach "." do |file|
    if File.directory? file
      unless exclude_dir.to_s.include? file
        pwd = Dir.pwd
        submap = collectFileMtime file, option
        is_empty = false unless submap.nil? or submap.empty?
        unless submap.nil?
          map[file] = submap
        end
        Dir.chdir pwd
      end
    else
      ext = File.extname file
      if include_ext.length == 0 or include_ext.to_s.include?(ext)
        unless exclude_ext.to_s.include? ext
          mtime = File.mtime file
          if md5 > 0
            map[file] = Digest::MD5.hexdigest(mtime.to_s)[0...md5];
          else
            map[file] = mtime.strftime formatter
          end
          is_empty = false
        end
      end
    end
  end

  return is_empty ? nil : map
end

option = {
  :pretty => false,
  :template => "#output#",
  :exclude_ext => [".DS_Store", ".swp"],
  :include_ext => [],
  :exclude_dir => [".","..",".svn",".git"],
  :md5 => 0,
  :time_format => "%Y%m%d%H%M%S"
}

begin
  OptionParser.new do |opts|
      opts.banner = <<-EOF
file-timestamp #{VERSION}
generate file timestamp with JSON format
Usage:
timestamp [dir] 
    EOF
    opts.on('--pretty', "format output") { option[:pretty] = true }
    opts.on('--template <template>', 'content template，using #output# identify content，e.g. --template ";var json=#output#;"') { |template| option[:template] = template}
    opts.on("--include-ext x,y,z", Array, "include file extentions") { |include_ext| option[:include_ext].concat include_ext }
    opts.on("--exclude-ext x,y,z", Array, "exclude file extentions") { |exclude_ext| option[:exclude_ext].concat exclude_ext }
    opts.on("--exclude-dir x,y,z", Array, "exclude directories, default is .svn,.git") { |exclude_dir| option[:exclude_dir].concat exclude_dir }
    opts.on("--seajs", "use seajs template"){option[:template] = ";define('timestamp', function(require, exports, module) {\n module.exports =#output#\n});" }
    opts.on("--md5 <length>", "use MD5 checksum instead of datetime"){ |length| option[:md5] = length.to_i }
    opts.on("--time_format <format>", 'timestamp formatter string, default is %Y%m%d%H%M%S'){ |format| option[:time_format] = format } 
    opts.on("--version", "show version"){option[:version] = true}

  end.parse!

  if option[:version]
    puts VERSION
  else
    tree = collectFileMtime(ARGV[0] || ".", option.clone)

    if option[:pretty]
      output = JSON.pretty_generate(tree)
    else
      output = tree.to_json
    end

    if option[:template] != "#output#"
      puts option[:template].sub("#output#",output)
    else
      puts output
    end
  end
rescue OptionParser::InvalidOption => e
  puts "illegal option, show help: #$0 --help "
rescue Exception => e
  puts e.to_s
end
